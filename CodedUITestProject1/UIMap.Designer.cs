// ------------------------------------------------------------------------------
//  <auto-generated>
//      Dieser Code wurde vom Coded UI-Test-Generator generiert.
//      Version: 15.0.0.0
//
//      In dieser Datei sind spezialisierte Klassen definiert, die in einem
//      Coded UI-Test verwendet werden.
//      In dieser Datei können die erforderlichen Anpassungen vorgenommen werden.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Login_Arrange_Act - Verwenden Sie "Login_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Login_Arrange_Act()
        {
            #region Variable Declarations
            WinEdit uITypEdit = this.UIDebugWindow.UIItemWindow.UIHotelGUIexeListItem.UITypEdit;
            WpfButton uILoginButton = this.UIMainWindowWindow.UILoginButton;
            WpfEdit uILt1Edit = this.UIMainWindowWindow.UIF2Pane.UILt1Edit;
            WpfEdit uILt2Edit = this.UIMainWindowWindow.UIF2Pane.UILt2Edit;
            WpfButton uISubmitButton = this.UIMainWindowWindow.UIF2Pane.UISubmitButton;
            #endregion

            // Doppelklicken "Typ" Textfeld
            Mouse.DoubleClick(uITypEdit, new Point(35, 4));

            // Klicken "Login" Schaltfläche
            Mouse.Click(uILoginButton, new Point(134, 21));

            // "test" in "lt1" Textfeld eingeben
            uILt1Edit.Text = this.Login_Arrange_ActParams.UILt1EditText;

            // "{Tab}" in "lt1" Textfeld eingeben
            Keyboard.SendKeys(uILt1Edit, this.Login_Arrange_ActParams.UILt1EditSendKeys, ModifierKeys.None);

            // "123" in "lt2" Textfeld eingeben
            uILt2Edit.Text = this.Login_Arrange_ActParams.UILt2EditText;

            // Klicken "Submit" Schaltfläche
            Mouse.Click(uISubmitButton, new Point(91, 12));
        }
        
        /// <summary>
        /// Fallfehler 1
        /// </summary>
        public void Login_Assert()
        {
            #region Variable Declarations
            WpfText uIAcceptedText1 = this.UIMainWindowWindow.UIF2Pane.UIAcceptedText.UIAcceptedText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'ControlType' von "accepted" Bezeichnung ist gleich 'accepted'
            Assert.AreEqual(this.Login_AssertExpectedValues.UIAcceptedText1ControlType, uIAcceptedText1.ControlType.ToString(), "Fallfahler ");
        }
        
        /// <summary>
        /// Login_CleanUp
        /// </summary>
        public void Login_CleanUp()
        {
            #region Variable Declarations
            WpfButton uILogoutButton = this.UIMenuWindow.UILogoutButton;
            WinButton uIJAButton = this.UISalüzemeWindow.UIJAWindow.UIJAButton;
            #endregion

            // Klicken "Logout" Schaltfläche
            Mouse.Click(uILogoutButton, new Point(68, 29));

            // Klicken "&Ja" Schaltfläche
            Mouse.Click(uIJAButton, new Point(58, 7));
        }
        
        /// <summary>
        /// Registration_Assert
        /// </summary>
        public void Registration_Assert()
        {
            #region Variable Declarations
            WpfButton uISubmitButton = this.UIMainWindowWindow.UIF2Pane.UISubmitButton;
            #endregion

            // Klicken "Submit" Schaltfläche
            Mouse.Click(uISubmitButton, new Point(109, 10));
        }
        
        /// <summary>
        /// Checks if Data is not saved
        /// </summary>
        public void Registration_Arrange_Act()
        {
            #region Variable Declarations
            WpfText uIDatanotsavedText1 = this.UIMainWindowWindow.UIF2Pane.UIDatanotsavedText.UIDatanotsavedText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Data not saved" Bezeichnung ist gleich 'Data not saved'
            Assert.AreEqual(this.Registration_Arrange_ActExpectedValues.UIDatanotsavedText1DisplayText, uIDatanotsavedText1.DisplayText, "Fallfehler 2");
        }
        
        /// <summary>
        /// Registration_CleanUp
        /// </summary>
        public void Registration_CleanUp()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UIMainWindowWindow1.UISchließenButton;
            #endregion

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(38, 13));
        }
        
        /// <summary>
        /// Checks if user has been found
        /// </summary>
        public void LoadUser_Arrange_Act()
        {
            #region Variable Declarations
            WpfButton uILoadButton = this.UIMenuWindow.UIC1Pane.UIC3Pane.UILoadButton;
            #endregion

            // Klicken "Load" Schaltfläche
            Mouse.Click(uILoadButton, new Point(110, 10));
        }
        
        /// <summary>
        /// Fallfehler 3
        /// </summary>
        public void LoadUser_Assert()
        {
            #region Variable Declarations
            WpfText uIUsernotFoundText1 = this.UIMenuWindow.UIC3Pane.UIUsernotFoundText.UIUsernotFoundText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "User not Found" Bezeichnung ist gleich 'User not Found'
            Assert.AreEqual(this.LoadUser_AssertExpectedValues.UIUsernotFoundText1DisplayText, uIUsernotFoundText1.DisplayText, "Fallfehler3");
        }
        
        /// <summary>
        /// LoadUser_CleanUp
        /// </summary>
        public void LoadUser_CleanUp()
        {
            #region Variable Declarations
            WpfButton uILogoutButton = this.UIMenuWindow.UILogoutButton;
            WinButton uIJAButton = this.UISalüzemeWindow.UIJAWindow.UIJAButton;
            #endregion

            // Klicken "Logout" Schaltfläche
            Mouse.Click(uILogoutButton, new Point(34, 34));

            // Klicken "&Ja" Schaltfläche
            Mouse.Click(uIJAButton, new Point(58, 20));
        }
        
        /// <summary>
        /// getUser_Arrange_Act - Verwenden Sie "getUser_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void getUser_Arrange_Act()
        {
            #region Variable Declarations
            WpfEdit uITbLoadEdit = this.UIMenuWindow.UIC1Pane.UIC3Pane.UITbLoadEdit;
            WpfButton uILoadButton = this.UIMenuWindow.UIC1Pane.UIC3Pane.UILoadButton;
            #endregion

            // "Bouja" in "tbLoad" Textfeld eingeben
            uITbLoadEdit.Text = this.getUser_Arrange_ActParams.UITbLoadEditText;

            // Klicken "Load" Schaltfläche
            Mouse.Click(uILoadButton, new Point(83, 3));
        }
        
        /// <summary>
        /// getUser_Assert - Verwenden Sie "getUser_AssertExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void getUser_Assert()
        {
            #region Variable Declarations
            WpfText uIUserFoundText1 = this.UIMenuWindow.UIC3Pane.UIUsernotFoundText.UIUserFoundText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "User Found" Bezeichnung ist gleich 'User Found'
            Assert.AreEqual(this.getUser_AssertExpectedValues.UIUserFoundText1DisplayText, uIUserFoundText1.DisplayText, "Fallfehler 4");
        }
        
        /// <summary>
        /// getUser_CleanUp
        /// </summary>
        public void getUser_CleanUp()
        {
            #region Variable Declarations
            WpfButton uILogoutButton = this.UIMenuWindow.UILogoutButton;
            WinButton uIJAButton = this.UISalüzemeWindow.UIJAWindow.UIJAButton;
            #endregion

            // Klicken "Logout" Schaltfläche
            Mouse.Click(uILogoutButton, new Point(96, 32));

            // Klicken "&Ja" Schaltfläche
            Mouse.Click(uIJAButton, new Point(39, 12));
        }
        
        /// <summary>
        /// LoginEmpty_Arrange_Act
        /// </summary>
        public void LoginEmpty_Arrange_Act()
        {
            #region Variable Declarations
            WinEdit uIÄnderungsdatumEdit = this.UIDebugWindow.UIItemWindow.UIHotelGUIexeListItem.UIÄnderungsdatumEdit;
            WpfButton uILoginButton = this.UIMainWindowWindow.UILoginButton;
            WpfButton uISubmitButton = this.UIMainWindowWindow.UIF2Pane.UISubmitButton;
            #endregion

            // Doppelklicken "Änderungsdatum" Textfeld
            Mouse.DoubleClick(uIÄnderungsdatumEdit, new Point(57, 7));

            // Klicken "Login" Schaltfläche
            Mouse.Click(uILoginButton, new Point(146, 23));

            // Klicken "Submit" Schaltfläche
            Mouse.Click(uISubmitButton, new Point(82, 11));
        }
        
        /// <summary>
        /// LoginEmpty_Assert - Verwenden Sie "LoginEmpty_AssertExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void LoginEmpty_Assert()
        {
            #region Variable Declarations
            WpfText uIUsernameorPasswordcaText1 = this.UIMainWindowWindow.UIF2Pane.UIAcceptedText.UIUsernameorPasswordcaText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Username or Password cant be empty" Bezeichnung ist gleich ' Username or Password cant be empty'
            Assert.AreEqual(this.LoginEmpty_AssertExpectedValues.UIUsernameorPasswordcaText1DisplayText, uIUsernameorPasswordcaText1.DisplayText, "Fallfehler 5");
        }
        
        /// <summary>
        /// LoginEmpty_CleanUp
        /// </summary>
        public void LoginEmpty_CleanUp()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UIMainWindowWindow1.UISchließenButton;
            #endregion

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(22, 13));
        }
        
        /// <summary>
        /// LoginAccepted_Arrange_Act - Verwenden Sie "LoginAccepted_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void LoginAccepted_Arrange_Act()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIHotelGUIexeListItem.UINameEdit;
            WpfButton uILoginButton = this.UIMainWindowWindow.UILoginButton;
            WpfEdit uILt1Edit = this.UIMainWindowWindow.UIF2Pane.UILt1Edit;
            WpfEdit uILt2Edit = this.UIMainWindowWindow.UIF2Pane.UILt2Edit;
            WpfButton uISubmitButton = this.UIMainWindowWindow.UIF2Pane.UISubmitButton;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(56, 6));

            // Klicken "Login" Schaltfläche
            Mouse.Click(uILoginButton, new Point(92, 20));

            // "test" in "lt1" Textfeld eingeben
            uILt1Edit.Text = this.LoginAccepted_Arrange_ActParams.UILt1EditText;

            // "{Tab}" in "lt1" Textfeld eingeben
            Keyboard.SendKeys(uILt1Edit, this.LoginAccepted_Arrange_ActParams.UILt1EditSendKeys, ModifierKeys.None);

            // "123" in "lt2" Textfeld eingeben
            uILt2Edit.Text = this.LoginAccepted_Arrange_ActParams.UILt2EditText;

            // Klicken "Submit" Schaltfläche
            Mouse.Click(uISubmitButton, new Point(106, 14));
        }
        
        /// <summary>
        /// LoginAccepted_Assert - Verwenden Sie "LoginAccepted_AssertExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void LoginAccepted_Assert()
        {
            #region Variable Declarations
            WpfText uIAcceptedText1 = this.UIMainWindowWindow.UIF2Pane.UIAcceptedText.UIAcceptedText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "accepted" Bezeichnung ist gleich 'accepted'
            Assert.AreEqual(this.LoginAccepted_AssertExpectedValues.UIAcceptedText1DisplayText, uIAcceptedText1.DisplayText, "fallfehler 1");
        }
        
        /// <summary>
        /// LoginAccepted_CleanUp
        /// </summary>
        public void LoginAccepted_CleanUp()
        {
            #region Variable Declarations
            WpfButton uILogoutButton = this.UIMenuWindow.UILogoutButton;
            WinButton uIJAButton = this.UISalüzemeWindow.UIJAWindow.UIJAButton;
            #endregion

            // Klicken "Logout" Schaltfläche
            Mouse.Click(uILogoutButton, new Point(54, 67));

            // Klicken "&Ja" Schaltfläche
            Mouse.Click(uIJAButton, new Point(22, 4));
        }
        
        /// <summary>
        /// LoginFailed_Arrange_Act - Verwenden Sie "LoginFailed_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void LoginFailed_Arrange_Act()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIHotelGUIexeListItem.UINameEdit;
            WpfButton uILoginButton = this.UIMainWindowWindow.UILoginButton;
            WpfEdit uILt1Edit = this.UIMainWindowWindow.UIF2Pane.UILt1Edit;
            WpfEdit uILt2Edit = this.UIMainWindowWindow.UIF2Pane.UILt2Edit;
            WpfPane uIF2Pane = this.UIMainWindowWindow.UIF2Pane;
            WpfButton uISubmitButton = this.UIMainWindowWindow.UIF2Pane.UISubmitButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(78, 13));

            // Klicken "Login" Schaltfläche
            Mouse.Click(uILoginButton, new Point(126, 10));

            // "er" in "lt1" Textfeld eingeben
            uILt1Edit.Text = this.LoginFailed_Arrange_ActParams.UILt1EditText;

            // "Control + a" in "lt1" Textfeld eingeben
            Keyboard.SendKeys(uILt1Edit, this.LoginFailed_Arrange_ActParams.UILt1EditSendKeys, ModifierKeys.Control);

            // "123545" in "lt2" Textfeld eingeben
            uILt2Edit.Text = this.LoginFailed_Arrange_ActParams.UILt2EditText;

            // Klicken "f2" Bereich
            Mouse.Click(uIF2Pane, new Point(449, 227));

            // Klicken "Submit" Schaltfläche
            Mouse.Click(uISubmitButton, new Point(123, 7));

            // Klicken "OK" Schaltfläche
            Mouse.Click(uIOKButton, new Point(51, 19));
        }
        
        /// <summary>
        /// LoginFailed_CleanUp
        /// </summary>
        public void LoginFailed_CleanUp()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UIMainWindowWindow1.UISchließenButton;
            #endregion

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(9, 24));
        }
        
        /// <summary>
        /// LoginFailed2_Arrange_Act - Verwenden Sie "LoginFailed2_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void LoginFailed2_Arrange_Act()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIHotelGUIexeListItem.UINameEdit;
            WpfButton uILoginButton = this.UIMainWindowWindow.UILoginButton;
            WpfEdit uILt1Edit = this.UIMainWindowWindow.UIF2Pane.UILt1Edit;
            WpfEdit uILt2Edit = this.UIMainWindowWindow.UIF2Pane.UILt2Edit;
            WpfButton uISubmitButton = this.UIMainWindowWindow.UIF2Pane.UISubmitButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(84, 9));

            // Klicken "Login" Schaltfläche
            Mouse.Click(uILoginButton, new Point(113, 18));

            // "was" in "lt1" Textfeld eingeben
            uILt1Edit.Text = this.LoginFailed2_Arrange_ActParams.UILt1EditText;

            // "1" in "lt2" Textfeld eingeben
            uILt2Edit.Text = this.LoginFailed2_Arrange_ActParams.UILt2EditText;

            // Klicken "Submit" Schaltfläche
            Mouse.Click(uISubmitButton, new Point(134, 5));

            // Klicken "OK" Schaltfläche
            Mouse.Click(uIOKButton, new Point(1, 7));
        }
        
        /// <summary>
        /// AssertMethod1 - Verwenden Sie "AssertMethod1ExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfText uIFalseText1 = this.UIMainWindowWindow.UIF2Pane.UIAcceptedText.UIFalseText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "false" Bezeichnung ist gleich 'false'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIFalseText1DisplayText, uIFalseText1.DisplayText, "Fallfehler 2");
        }
        
        /// <summary>
        /// LoginFailed2_CleanUp
        /// </summary>
        public void LoginFailed2_CleanUp()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UIMainWindowWindow1.UISchließenButton;
            #endregion

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(12, 15));
        }
        
        /// <summary>
        /// UserNotFound_Arrange_Act - Verwenden Sie "UserNotFound_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void UserNotFound_Arrange_Act()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIHotelGUIexeListItem.UINameEdit;
            WpfButton uILoginButton = this.UIMainWindowWindow.UILoginButton;
            WpfEdit uILt1Edit = this.UIMainWindowWindow.UIF2Pane.UILt1Edit;
            WpfEdit uILt2Edit = this.UIMainWindowWindow.UIF2Pane.UILt2Edit;
            WpfButton uISubmitButton = this.UIMainWindowWindow.UIF2Pane.UISubmitButton;
            WpfButton uIProfileButton = this.UIMenuWindow.UIProfileButton;
            WpfButton uIUpdateDeleteButton = this.UIMenuWindow.UIC1Pane.UIUpdateDeleteButton;
            WpfButton uILoadButton = this.UIMenuWindow.UIC1Pane.UIC3Pane.UILoadButton;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(63, 17));

            // Klicken "Login" Schaltfläche
            Mouse.Click(uILoginButton, new Point(72, 16));

            // "test" in "lt1" Textfeld eingeben
            uILt1Edit.Text = this.UserNotFound_Arrange_ActParams.UILt1EditText;

            // "Control + {LShiftKey}" in "lt1" Textfeld eingeben
            Keyboard.SendKeys(uILt1Edit, this.UserNotFound_Arrange_ActParams.UILt1EditSendKeys, ModifierKeys.Control);

            // "Control + a" in "lt1" Textfeld eingeben
            Keyboard.SendKeys(uILt1Edit, this.UserNotFound_Arrange_ActParams.UILt1EditSendKeys1, ModifierKeys.Control);

            // "123" in "lt2" Textfeld eingeben
            uILt2Edit.Text = this.UserNotFound_Arrange_ActParams.UILt2EditText;

            // Klicken "Submit" Schaltfläche
            Mouse.Click(uISubmitButton, new Point(102, 6));

            // Klicken "Profile" Schaltfläche
            Mouse.Click(uIProfileButton, new Point(37, 44));

            // Klicken "Update/Delete" Schaltfläche
            Mouse.Click(uIUpdateDeleteButton, new Point(145, 12));

            // Klicken "Load" Schaltfläche
            Mouse.Click(uILoadButton, new Point(32, 16));
        }
        
        /// <summary>
        /// UserNotFound_Assert - Verwenden Sie "UserNotFound_AssertExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void UserNotFound_Assert()
        {
            #region Variable Declarations
            WpfText uIUsernotFoundText1 = this.UIMenuWindow.UIC3Pane.UIUsernotFoundText.UIUsernotFoundText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "User not Found" Bezeichnung ist gleich 'User not Found'
            Assert.AreEqual(this.UserNotFound_AssertExpectedValues.UIUsernotFoundText1DisplayText, uIUsernotFoundText1.DisplayText, "Fallfehler3");
        }
        
        /// <summary>
        /// UserNotFound_CleanUp
        /// </summary>
        public void UserNotFound_CleanUp()
        {
            #region Variable Declarations
            WpfButton uILogoutButton = this.UIMenuWindow.UILogoutButton;
            WinButton uIJAButton = this.UISalüzemeWindow.UIJAWindow.UIJAButton;
            #endregion

            // Klicken "Logout" Schaltfläche
            Mouse.Click(uILogoutButton, new Point(52, 42));

            // Klicken "&Ja" Schaltfläche
            Mouse.Click(uIJAButton, new Point(64, 2));
        }
        
        /// <summary>
        /// NothingUpdated_Arrange_Act - Verwenden Sie "NothingUpdated_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void NothingUpdated_Arrange_Act()
        {
            #region Variable Declarations
            WinEdit uIÄnderungsdatumEdit = this.UIDebugWindow.UIItemWindow.UIHotelGUIexeListItem.UIÄnderungsdatumEdit;
            WinWindow uIMainWindowWindow1 = this.UIMainWindowWindow1;
            WpfButton uILoginButton = this.UIMainWindowWindow.UILoginButton;
            WpfPane uIF2Pane = this.UIMainWindowWindow.UIF2Pane;
            WpfEdit uILt1Edit = this.UIMainWindowWindow.UIF2Pane.UILt1Edit;
            WpfEdit uILt2Edit = this.UIMainWindowWindow.UIF2Pane.UILt2Edit;
            WpfButton uISubmitButton = this.UIMainWindowWindow.UIF2Pane.UISubmitButton;
            WpfButton uIHotelsButton = this.UIMenuWindow.UIHotelsButton;
            WpfButton uIProfileButton = this.UIMenuWindow.UIProfileButton;
            WpfButton uIUpdateDeleteButton = this.UIMenuWindow.UIC1Pane.UIUpdateDeleteButton;
            WpfEdit uITbLoadEdit = this.UIMenuWindow.UIC1Pane.UIC3Pane.UITbLoadEdit;
            WpfButton uILoadButton = this.UIMenuWindow.UIC1Pane.UIC3Pane.UILoadButton;
            WpfButton uIUpdateButton = this.UIMenuWindow.UIC1Pane.UIC3Pane.UIUpdateButton;
            #endregion

            // Doppelklicken "Änderungsdatum" Textfeld
            Mouse.DoubleClick(uIÄnderungsdatumEdit, new Point(2, 5));

            // "Control + a" in "MainWindow" Fenster eingeben
            Keyboard.SendKeys(uIMainWindowWindow1, this.NothingUpdated_Arrange_ActParams.UIMainWindowWindow1SendKeys, ModifierKeys.Control);

            // Klicken "Login" Schaltfläche
            Mouse.Click(uILoginButton, new Point(124, 22));

            // "Control + a" in "Login" Schaltfläche eingeben
            Keyboard.SendKeys(uILoginButton, this.NothingUpdated_Arrange_ActParams.UILoginButtonSendKeys, ModifierKeys.Control);

            // Klicken "f2" Bereich
            Mouse.Click(uIF2Pane, new Point(434, 169));

            // "test" in "lt1" Textfeld eingeben
            uILt1Edit.Text = this.NothingUpdated_Arrange_ActParams.UILt1EditText;

            // "123" in "lt2" Textfeld eingeben
            uILt2Edit.Text = this.NothingUpdated_Arrange_ActParams.UILt2EditText;

            // Klicken "Submit" Schaltfläche
            Mouse.Click(uISubmitButton, new Point(116, 20));

            // Klicken "Hotels" Schaltfläche
            Mouse.Click(uIHotelsButton, new Point(14, 65));

            // Klicken "Profile" Schaltfläche
            Mouse.Click(uIProfileButton, new Point(50, 55));

            // Klicken "Update/Delete" Schaltfläche
            Mouse.Click(uIUpdateDeleteButton, new Point(127, 4));

            // "Bouja" in "tbLoad" Textfeld eingeben
            uITbLoadEdit.Text = this.NothingUpdated_Arrange_ActParams.UITbLoadEditText;

            // Klicken "Load" Schaltfläche
            Mouse.Click(uILoadButton, new Point(79, 10));

            // Klicken "Update" Schaltfläche
            Mouse.Click(uIUpdateButton, new Point(43, 7));
        }
        
        /// <summary>
        /// NothingUpdated_Assert - Verwenden Sie "NothingUpdated_AssertExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void NothingUpdated_Assert()
        {
            #region Variable Declarations
            WpfText uINothingUpdatedText1 = this.UIMenuWindow.UIC3Pane.UINothingUpdatedText.UINothingUpdatedText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Nothing Updated" Bezeichnung ist gleich 'Nothing Updated'
            Assert.AreEqual(this.NothingUpdated_AssertExpectedValues.UINothingUpdatedText1DisplayText, uINothingUpdatedText1.DisplayText, "Fallfehler4");
        }
        
        /// <summary>
        /// NothingUpdate_CleanUp
        /// </summary>
        public void NothingUpdate_CleanUp()
        {
            #region Variable Declarations
            WpfButton uILogoutButton = this.UIMenuWindow.UILogoutButton;
            WinButton uIJAButton = this.UISalüzemeWindow.UIJAWindow.UIJAButton;
            #endregion

            // Klicken "Logout" Schaltfläche
            Mouse.Click(uILogoutButton, new Point(48, 28));

            // Klicken "&Ja" Schaltfläche
            Mouse.Click(uIJAButton, new Point(27, 19));
        }
        
        /// <summary>
        /// LoginFalse_Arrange_Act - Verwenden Sie "LoginFalse_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void LoginFalse_Arrange_Act()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIHotelGUIexeListItem.UINameEdit;
            WpfButton uILoginButton = this.UIMainWindowWindow.UILoginButton;
            WpfEdit uILt1Edit = this.UIMainWindowWindow.UIF2Pane.UILt1Edit;
            WpfEdit uILt2Edit = this.UIMainWindowWindow.UIF2Pane.UILt2Edit;
            WpfButton uISubmitButton = this.UIMainWindowWindow.UIF2Pane.UISubmitButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(235, 6));

            // Klicken "Login" Schaltfläche
            Mouse.Click(uILoginButton, new Point(114, 21));

            // "test" in "lt1" Textfeld eingeben
            uILt1Edit.Text = this.LoginFalse_Arrange_ActParams.UILt1EditText;

            // "blalab" in "lt2" Textfeld eingeben
            uILt2Edit.Text = this.LoginFalse_Arrange_ActParams.UILt2EditText;

            // Klicken "Submit" Schaltfläche
            Mouse.Click(uISubmitButton, new Point(64, 9));

            // Klicken "OK" Schaltfläche
            Mouse.Click(uIOKButton, new Point(17, 11));
        }
        
        /// <summary>
        /// LoginFailed_Assert - Verwenden Sie "LoginFailed_AssertExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void LoginFailed_Assert()
        {
            #region Variable Declarations
            WpfText uIFalseText1 = this.UIMainWindowWindow.UIF2Pane.UIAcceptedText.UIFalseText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "false" Bezeichnung ist gleich 'false'
            Assert.AreEqual(this.LoginFailed_AssertExpectedValues.UIFalseText1DisplayText, uIFalseText1.DisplayText, "fallfehler2");
        }
        
        /// <summary>
        /// LoginNotGood_Arrange_Act - Verwenden Sie "LoginNotGood_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void LoginNotGood_Arrange_Act()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIHotelGUIexeListItem.UINameEdit;
            WpfButton uILoginButton = this.UIMainWindowWindow.UILoginButton;
            WpfPane uIF2Pane = this.UIMainWindowWindow.UIF2Pane;
            WpfEdit uILt1Edit = this.UIMainWindowWindow.UIF2Pane.UILt1Edit;
            WpfEdit uILt2Edit = this.UIMainWindowWindow.UIF2Pane.UILt2Edit;
            WpfButton uISubmitButton = this.UIMainWindowWindow.UIF2Pane.UISubmitButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(84, 18));

            // Klicken "Login" Schaltfläche
            Mouse.Click(uILoginButton, new Point(84, 12));

            // Klicken "f2" Bereich
            Mouse.Click(uIF2Pane, new Point(446, 198));

            // "tarik" in "lt1" Textfeld eingeben
            uILt1Edit.Text = this.LoginNotGood_Arrange_ActParams.UILt1EditText;

            // "{Tab}" in "lt1" Textfeld eingeben
            Keyboard.SendKeys(uILt1Edit, this.LoginNotGood_Arrange_ActParams.UILt1EditSendKeys, ModifierKeys.None);

            // "18" in "lt2" Textfeld eingeben
            uILt2Edit.Text = this.LoginNotGood_Arrange_ActParams.UILt2EditText;

            // Klicken "Submit" Schaltfläche
            Mouse.Click(uISubmitButton, new Point(108, 10));

            // Klicken "OK" Schaltfläche
            Mouse.Click(uIOKButton, new Point(53, 9));
        }
        
        /// <summary>
        /// LoginNotGood_Assert - Verwenden Sie "LoginNotGood_AssertExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void LoginNotGood_Assert()
        {
            #region Variable Declarations
            WpfText uIFalseText1 = this.UIMainWindowWindow.UIF2Pane.UIAcceptedText.UIFalseText1;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "false" Bezeichnung ist gleich 'false'
            Assert.AreEqual(this.LoginNotGood_AssertExpectedValues.UIFalseText1DisplayText, uIFalseText1.DisplayText, "fallfehler2");
        }
        
        /// <summary>
        /// LoginNotGood_CleanUp
        /// </summary>
        public void LoginNotGood_CleanUp()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UIMainWindowWindow1.UISchließenButton;
            #endregion

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(20, 7));
        }
        
        #region Properties
        public virtual Login_Arrange_ActParams Login_Arrange_ActParams
        {
            get
            {
                if ((this.mLogin_Arrange_ActParams == null))
                {
                    this.mLogin_Arrange_ActParams = new Login_Arrange_ActParams();
                }
                return this.mLogin_Arrange_ActParams;
            }
        }
        
        public virtual Login_AssertExpectedValues Login_AssertExpectedValues
        {
            get
            {
                if ((this.mLogin_AssertExpectedValues == null))
                {
                    this.mLogin_AssertExpectedValues = new Login_AssertExpectedValues();
                }
                return this.mLogin_AssertExpectedValues;
            }
        }
        
        public virtual Registration_Arrange_ActExpectedValues Registration_Arrange_ActExpectedValues
        {
            get
            {
                if ((this.mRegistration_Arrange_ActExpectedValues == null))
                {
                    this.mRegistration_Arrange_ActExpectedValues = new Registration_Arrange_ActExpectedValues();
                }
                return this.mRegistration_Arrange_ActExpectedValues;
            }
        }
        
        public virtual LoadUser_AssertExpectedValues LoadUser_AssertExpectedValues
        {
            get
            {
                if ((this.mLoadUser_AssertExpectedValues == null))
                {
                    this.mLoadUser_AssertExpectedValues = new LoadUser_AssertExpectedValues();
                }
                return this.mLoadUser_AssertExpectedValues;
            }
        }
        
        public virtual getUser_Arrange_ActParams getUser_Arrange_ActParams
        {
            get
            {
                if ((this.mgetUser_Arrange_ActParams == null))
                {
                    this.mgetUser_Arrange_ActParams = new getUser_Arrange_ActParams();
                }
                return this.mgetUser_Arrange_ActParams;
            }
        }
        
        public virtual getUser_AssertExpectedValues getUser_AssertExpectedValues
        {
            get
            {
                if ((this.mgetUser_AssertExpectedValues == null))
                {
                    this.mgetUser_AssertExpectedValues = new getUser_AssertExpectedValues();
                }
                return this.mgetUser_AssertExpectedValues;
            }
        }
        
        public virtual LoginEmpty_AssertExpectedValues LoginEmpty_AssertExpectedValues
        {
            get
            {
                if ((this.mLoginEmpty_AssertExpectedValues == null))
                {
                    this.mLoginEmpty_AssertExpectedValues = new LoginEmpty_AssertExpectedValues();
                }
                return this.mLoginEmpty_AssertExpectedValues;
            }
        }
        
        public virtual LoginAccepted_Arrange_ActParams LoginAccepted_Arrange_ActParams
        {
            get
            {
                if ((this.mLoginAccepted_Arrange_ActParams == null))
                {
                    this.mLoginAccepted_Arrange_ActParams = new LoginAccepted_Arrange_ActParams();
                }
                return this.mLoginAccepted_Arrange_ActParams;
            }
        }
        
        public virtual LoginAccepted_AssertExpectedValues LoginAccepted_AssertExpectedValues
        {
            get
            {
                if ((this.mLoginAccepted_AssertExpectedValues == null))
                {
                    this.mLoginAccepted_AssertExpectedValues = new LoginAccepted_AssertExpectedValues();
                }
                return this.mLoginAccepted_AssertExpectedValues;
            }
        }
        
        public virtual LoginFailed_Arrange_ActParams LoginFailed_Arrange_ActParams
        {
            get
            {
                if ((this.mLoginFailed_Arrange_ActParams == null))
                {
                    this.mLoginFailed_Arrange_ActParams = new LoginFailed_Arrange_ActParams();
                }
                return this.mLoginFailed_Arrange_ActParams;
            }
        }
        
        public virtual LoginFailed2_Arrange_ActParams LoginFailed2_Arrange_ActParams
        {
            get
            {
                if ((this.mLoginFailed2_Arrange_ActParams == null))
                {
                    this.mLoginFailed2_Arrange_ActParams = new LoginFailed2_Arrange_ActParams();
                }
                return this.mLoginFailed2_Arrange_ActParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual UserNotFound_Arrange_ActParams UserNotFound_Arrange_ActParams
        {
            get
            {
                if ((this.mUserNotFound_Arrange_ActParams == null))
                {
                    this.mUserNotFound_Arrange_ActParams = new UserNotFound_Arrange_ActParams();
                }
                return this.mUserNotFound_Arrange_ActParams;
            }
        }
        
        public virtual UserNotFound_AssertExpectedValues UserNotFound_AssertExpectedValues
        {
            get
            {
                if ((this.mUserNotFound_AssertExpectedValues == null))
                {
                    this.mUserNotFound_AssertExpectedValues = new UserNotFound_AssertExpectedValues();
                }
                return this.mUserNotFound_AssertExpectedValues;
            }
        }
        
        public virtual NothingUpdated_Arrange_ActParams NothingUpdated_Arrange_ActParams
        {
            get
            {
                if ((this.mNothingUpdated_Arrange_ActParams == null))
                {
                    this.mNothingUpdated_Arrange_ActParams = new NothingUpdated_Arrange_ActParams();
                }
                return this.mNothingUpdated_Arrange_ActParams;
            }
        }
        
        public virtual NothingUpdated_AssertExpectedValues NothingUpdated_AssertExpectedValues
        {
            get
            {
                if ((this.mNothingUpdated_AssertExpectedValues == null))
                {
                    this.mNothingUpdated_AssertExpectedValues = new NothingUpdated_AssertExpectedValues();
                }
                return this.mNothingUpdated_AssertExpectedValues;
            }
        }
        
        public virtual LoginFalse_Arrange_ActParams LoginFalse_Arrange_ActParams
        {
            get
            {
                if ((this.mLoginFalse_Arrange_ActParams == null))
                {
                    this.mLoginFalse_Arrange_ActParams = new LoginFalse_Arrange_ActParams();
                }
                return this.mLoginFalse_Arrange_ActParams;
            }
        }
        
        public virtual LoginFailed_AssertExpectedValues LoginFailed_AssertExpectedValues
        {
            get
            {
                if ((this.mLoginFailed_AssertExpectedValues == null))
                {
                    this.mLoginFailed_AssertExpectedValues = new LoginFailed_AssertExpectedValues();
                }
                return this.mLoginFailed_AssertExpectedValues;
            }
        }
        
        public virtual LoginNotGood_Arrange_ActParams LoginNotGood_Arrange_ActParams
        {
            get
            {
                if ((this.mLoginNotGood_Arrange_ActParams == null))
                {
                    this.mLoginNotGood_Arrange_ActParams = new LoginNotGood_Arrange_ActParams();
                }
                return this.mLoginNotGood_Arrange_ActParams;
            }
        }
        
        public virtual LoginNotGood_AssertExpectedValues LoginNotGood_AssertExpectedValues
        {
            get
            {
                if ((this.mLoginNotGood_AssertExpectedValues == null))
                {
                    this.mLoginNotGood_AssertExpectedValues = new LoginNotGood_AssertExpectedValues();
                }
                return this.mLoginNotGood_AssertExpectedValues;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIMenuWindow UIMenuWindow
        {
            get
            {
                if ((this.mUIMenuWindow == null))
                {
                    this.mUIMenuWindow = new UIMenuWindow();
                }
                return this.mUIMenuWindow;
            }
        }
        
        public UISalüzemeWindow UISalüzemeWindow
        {
            get
            {
                if ((this.mUISalüzemeWindow == null))
                {
                    this.mUISalüzemeWindow = new UISalüzemeWindow();
                }
                return this.mUISalüzemeWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private Login_Arrange_ActParams mLogin_Arrange_ActParams;
        
        private Login_AssertExpectedValues mLogin_AssertExpectedValues;
        
        private Registration_Arrange_ActExpectedValues mRegistration_Arrange_ActExpectedValues;
        
        private LoadUser_AssertExpectedValues mLoadUser_AssertExpectedValues;
        
        private getUser_Arrange_ActParams mgetUser_Arrange_ActParams;
        
        private getUser_AssertExpectedValues mgetUser_AssertExpectedValues;
        
        private LoginEmpty_AssertExpectedValues mLoginEmpty_AssertExpectedValues;
        
        private LoginAccepted_Arrange_ActParams mLoginAccepted_Arrange_ActParams;
        
        private LoginAccepted_AssertExpectedValues mLoginAccepted_AssertExpectedValues;
        
        private LoginFailed_Arrange_ActParams mLoginFailed_Arrange_ActParams;
        
        private LoginFailed2_Arrange_ActParams mLoginFailed2_Arrange_ActParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UserNotFound_Arrange_ActParams mUserNotFound_Arrange_ActParams;
        
        private UserNotFound_AssertExpectedValues mUserNotFound_AssertExpectedValues;
        
        private NothingUpdated_Arrange_ActParams mNothingUpdated_Arrange_ActParams;
        
        private NothingUpdated_AssertExpectedValues mNothingUpdated_AssertExpectedValues;
        
        private LoginFalse_Arrange_ActParams mLoginFalse_Arrange_ActParams;
        
        private LoginFailed_AssertExpectedValues mLoginFailed_AssertExpectedValues;
        
        private LoginNotGood_Arrange_ActParams mLoginNotGood_Arrange_ActParams;
        
        private LoginNotGood_AssertExpectedValues mLoginNotGood_AssertExpectedValues;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIMenuWindow mUIMenuWindow;
        
        private UISalüzemeWindow mUISalüzemeWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    /// <summary>
    /// An "Login_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Login_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "test" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditText = "test";
        
        /// <summary>
        /// "{Tab}" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// "123" in "lt2" Textfeld eingeben
        /// </summary>
        public string UILt2EditText = "123";
        #endregion
    }
    
    /// <summary>
    /// An "Login_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Login_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'ControlType' von "accepted" Bezeichnung ist gleich 'accepted'
        /// </summary>
        public string UIAcceptedText1ControlType = "accepted";
        #endregion
    }
    
    /// <summary>
    /// An "Registration_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Registration_Arrange_ActExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Data not saved" Bezeichnung ist gleich 'Data not saved'
        /// </summary>
        public string UIDatanotsavedText1DisplayText = "Data not saved";
        #endregion
    }
    
    /// <summary>
    /// An "LoadUser_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class LoadUser_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "User not Found" Bezeichnung ist gleich 'User not Found'
        /// </summary>
        public string UIUsernotFoundText1DisplayText = "User not Found";
        #endregion
    }
    
    /// <summary>
    /// An "getUser_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class getUser_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "Bouja" in "tbLoad" Textfeld eingeben
        /// </summary>
        public string UITbLoadEditText = "Bouja";
        #endregion
    }
    
    /// <summary>
    /// An "getUser_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class getUser_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "User Found" Bezeichnung ist gleich 'User Found'
        /// </summary>
        public string UIUserFoundText1DisplayText = "User Found";
        #endregion
    }
    
    /// <summary>
    /// An "LoginEmpty_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class LoginEmpty_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Username or Password cant be empty" Bezeichnung ist gleich ' Username or Password cant be empty'
        /// </summary>
        public string UIUsernameorPasswordcaText1DisplayText = " Username or Password cant be empty";
        #endregion
    }
    
    /// <summary>
    /// An "LoginAccepted_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class LoginAccepted_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "test" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditText = "test";
        
        /// <summary>
        /// "{Tab}" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// "123" in "lt2" Textfeld eingeben
        /// </summary>
        public string UILt2EditText = "123";
        #endregion
    }
    
    /// <summary>
    /// An "LoginAccepted_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class LoginAccepted_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "accepted" Bezeichnung ist gleich 'accepted'
        /// </summary>
        public string UIAcceptedText1DisplayText = "accepted";
        #endregion
    }
    
    /// <summary>
    /// An "LoginFailed_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class LoginFailed_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "er" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditText = "er";
        
        /// <summary>
        /// "Control + a" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditSendKeys = "a";
        
        /// <summary>
        /// "123545" in "lt2" Textfeld eingeben
        /// </summary>
        public string UILt2EditText = "123545";
        #endregion
    }
    
    /// <summary>
    /// An "LoginFailed2_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class LoginFailed2_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "was" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditText = "was";
        
        /// <summary>
        /// "1" in "lt2" Textfeld eingeben
        /// </summary>
        public string UILt2EditText = "1";
        #endregion
    }
    
    /// <summary>
    /// An "AssertMethod1" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "false" Bezeichnung ist gleich 'false'
        /// </summary>
        public string UIFalseText1DisplayText = "false";
        #endregion
    }
    
    /// <summary>
    /// An "UserNotFound_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UserNotFound_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "test" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditText = "test";
        
        /// <summary>
        /// "Control + {LShiftKey}" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditSendKeys = "{LShiftKey}";
        
        /// <summary>
        /// "Control + a" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditSendKeys1 = "a";
        
        /// <summary>
        /// "123" in "lt2" Textfeld eingeben
        /// </summary>
        public string UILt2EditText = "123";
        #endregion
    }
    
    /// <summary>
    /// An "UserNotFound_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UserNotFound_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "User not Found" Bezeichnung ist gleich 'User not Found'
        /// </summary>
        public string UIUsernotFoundText1DisplayText = "User not Found";
        #endregion
    }
    
    /// <summary>
    /// An "NothingUpdated_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class NothingUpdated_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "Control + a" in "MainWindow" Fenster eingeben
        /// </summary>
        public string UIMainWindowWindow1SendKeys = "a";
        
        /// <summary>
        /// "Control + a" in "Login" Schaltfläche eingeben
        /// </summary>
        public string UILoginButtonSendKeys = "a";
        
        /// <summary>
        /// "test" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditText = "test";
        
        /// <summary>
        /// "123" in "lt2" Textfeld eingeben
        /// </summary>
        public string UILt2EditText = "123";
        
        /// <summary>
        /// "Bouja" in "tbLoad" Textfeld eingeben
        /// </summary>
        public string UITbLoadEditText = "Bouja";
        #endregion
    }
    
    /// <summary>
    /// An "NothingUpdated_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class NothingUpdated_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Nothing Updated" Bezeichnung ist gleich 'Nothing Updated'
        /// </summary>
        public string UINothingUpdatedText1DisplayText = "Nothing Updated";
        #endregion
    }
    
    /// <summary>
    /// An "LoginFalse_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class LoginFalse_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "test" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditText = "test";
        
        /// <summary>
        /// "blalab" in "lt2" Textfeld eingeben
        /// </summary>
        public string UILt2EditText = "blalab";
        #endregion
    }
    
    /// <summary>
    /// An "LoginFailed_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class LoginFailed_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "false" Bezeichnung ist gleich 'false'
        /// </summary>
        public string UIFalseText1DisplayText = "false";
        #endregion
    }
    
    /// <summary>
    /// An "LoginNotGood_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class LoginNotGood_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "tarik" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditText = "tarik";
        
        /// <summary>
        /// "{Tab}" in "lt1" Textfeld eingeben
        /// </summary>
        public string UILt1EditSendKeys = "{Tab}";
        
        /// <summary>
        /// "18" in "lt2" Textfeld eingeben
        /// </summary>
        public string UILt2EditText = "18";
        #endregion
    }
    
    /// <summary>
    /// An "LoginNotGood_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class LoginNotGood_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "false" Bezeichnung ist gleich 'false'
        /// </summary>
        public string UIFalseText1DisplayText = "false";
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Elementansicht";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIHotelGUIexeListItem UIHotelGUIexeListItem
        {
            get
            {
                if ((this.mUIHotelGUIexeListItem == null))
                {
                    this.mUIHotelGUIexeListItem = new UIHotelGUIexeListItem(this);
                }
                return this.mUIHotelGUIexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHotelGUIexeListItem mUIHotelGUIexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIHotelGUIexeListItem : WinListItem
    {
        
        public UIHotelGUIexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinListItem.PropertyNames.Name] = "HotelGUI.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UITypEdit
        {
            get
            {
                if ((this.mUITypEdit == null))
                {
                    this.mUITypEdit = new WinEdit(this);
                    #region Suchkriterien
                    this.mUITypEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Typ";
                    this.mUITypEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUITypEdit;
            }
        }
        
        public WinEdit UIÄnderungsdatumEdit
        {
            get
            {
                if ((this.mUIÄnderungsdatumEdit == null))
                {
                    this.mUIÄnderungsdatumEdit = new WinEdit(this);
                    #region Suchkriterien
                    this.mUIÄnderungsdatumEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Änderungsdatum";
                    this.mUIÄnderungsdatumEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUIÄnderungsdatumEdit;
            }
        }
        
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Suchkriterien
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITypEdit;
        
        private WinEdit mUIÄnderungsdatumEdit;
        
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUILoginButton.SearchProperties[WpfButton.PropertyNames.Name] = "Login";
                    this.mUILoginButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        
        public UIF2Pane UIF2Pane
        {
            get
            {
                if ((this.mUIF2Pane == null))
                {
                    this.mUIF2Pane = new UIF2Pane(this);
                }
                return this.mUIF2Pane;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUILoginButton;
        
        private UIF2Pane mUIF2Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIF2Pane : WpfPane
    {
        
        public UIF2Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "f2";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UILt1Edit
        {
            get
            {
                if ((this.mUILt1Edit == null))
                {
                    this.mUILt1Edit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUILt1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "lt1";
                    this.mUILt1Edit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILt1Edit;
            }
        }
        
        public WpfEdit UILt2Edit
        {
            get
            {
                if ((this.mUILt2Edit == null))
                {
                    this.mUILt2Edit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUILt2Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "lt2";
                    this.mUILt2Edit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUILt2Edit;
            }
        }
        
        public WpfButton UISubmitButton
        {
            get
            {
                if ((this.mUISubmitButton == null))
                {
                    this.mUISubmitButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUISubmitButton.SearchProperties[WpfButton.PropertyNames.Name] = "Submit";
                    this.mUISubmitButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISubmitButton;
            }
        }
        
        public WpfText UIPasswordText
        {
            get
            {
                if ((this.mUIPasswordText == null))
                {
                    this.mUIPasswordText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIPasswordText.SearchProperties[WpfText.PropertyNames.AutomationId] = "lolxd";
                    this.mUIPasswordText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPasswordText;
            }
        }
        
        public UIAcceptedText UIAcceptedText
        {
            get
            {
                if ((this.mUIAcceptedText == null))
                {
                    this.mUIAcceptedText = new UIAcceptedText(this);
                }
                return this.mUIAcceptedText;
            }
        }
        
        public UIDatanotsavedText UIDatanotsavedText
        {
            get
            {
                if ((this.mUIDatanotsavedText == null))
                {
                    this.mUIDatanotsavedText = new UIDatanotsavedText(this);
                }
                return this.mUIDatanotsavedText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUILt1Edit;
        
        private WpfEdit mUILt2Edit;
        
        private WpfButton mUISubmitButton;
        
        private WpfText mUIPasswordText;
        
        private UIAcceptedText mUIAcceptedText;
        
        private UIDatanotsavedText mUIDatanotsavedText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIAcceptedText : WpfText
    {
        
        public UIAcceptedText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "HiddenMessage";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIAcceptedText1
        {
            get
            {
                if ((this.mUIAcceptedText1 == null))
                {
                    this.mUIAcceptedText1 = new WpfText(this);
                    #region Suchkriterien
                    this.mUIAcceptedText1.SearchProperties[WpfText.PropertyNames.Name] = "accepted";
                    this.mUIAcceptedText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIAcceptedText1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIAcceptedText1;
            }
        }
        
        public WpfText UIUsernameorPasswordcaText1
        {
            get
            {
                if ((this.mUIUsernameorPasswordcaText1 == null))
                {
                    this.mUIUsernameorPasswordcaText1 = new WpfText(this);
                    #region Suchkriterien
                    this.mUIUsernameorPasswordcaText1.SearchProperties[WpfText.PropertyNames.Name] = " Username or Password cant be empty";
                    this.mUIUsernameorPasswordcaText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIUsernameorPasswordcaText1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIUsernameorPasswordcaText1;
            }
        }
        
        public WpfText UIFalseText1
        {
            get
            {
                if ((this.mUIFalseText1 == null))
                {
                    this.mUIFalseText1 = new WpfText(this);
                    #region Suchkriterien
                    this.mUIFalseText1.SearchProperties[WpfText.PropertyNames.Name] = "false";
                    this.mUIFalseText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIFalseText1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIFalseText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIAcceptedText1;
        
        private WpfText mUIUsernameorPasswordcaText1;
        
        private WpfText mUIFalseText1;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIDatanotsavedText : WpfText
    {
        
        public UIDatanotsavedText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "hiddenl";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIDatanotsavedText1
        {
            get
            {
                if ((this.mUIDatanotsavedText1 == null))
                {
                    this.mUIDatanotsavedText1 = new WpfText(this);
                    #region Suchkriterien
                    this.mUIDatanotsavedText1.SearchProperties[WpfText.PropertyNames.Name] = "Data not saved";
                    this.mUIDatanotsavedText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIDatanotsavedText1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDatanotsavedText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIDatanotsavedText1;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIMenuWindow : WpfWindow
    {
        
        public UIMenuWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Menu";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Menu");
            #endregion
        }
        
        #region Properties
        public WpfButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUILogoutButton.SearchProperties[WpfButton.PropertyNames.Name] = "Logout";
                    this.mUILogoutButton.WindowTitles.Add("Menu");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        
        public UIC1Pane UIC1Pane
        {
            get
            {
                if ((this.mUIC1Pane == null))
                {
                    this.mUIC1Pane = new UIC1Pane(this);
                }
                return this.mUIC1Pane;
            }
        }
        
        public UIC3Pane1 UIC3Pane
        {
            get
            {
                if ((this.mUIC3Pane == null))
                {
                    this.mUIC3Pane = new UIC3Pane1(this);
                }
                return this.mUIC3Pane;
            }
        }
        
        public WpfButton UIProfileButton
        {
            get
            {
                if ((this.mUIProfileButton == null))
                {
                    this.mUIProfileButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIProfileButton.SearchProperties[WpfButton.PropertyNames.Name] = "Profile";
                    this.mUIProfileButton.WindowTitles.Add("Menu");
                    #endregion
                }
                return this.mUIProfileButton;
            }
        }
        
        public WpfButton UIHotelsButton
        {
            get
            {
                if ((this.mUIHotelsButton == null))
                {
                    this.mUIHotelsButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIHotelsButton.SearchProperties[WpfButton.PropertyNames.Name] = "Hotels";
                    this.mUIHotelsButton.WindowTitles.Add("Menu");
                    #endregion
                }
                return this.mUIHotelsButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUILogoutButton;
        
        private UIC1Pane mUIC1Pane;
        
        private UIC3Pane1 mUIC3Pane;
        
        private WpfButton mUIProfileButton;
        
        private WpfButton mUIHotelsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIC1Pane : WpfPane
    {
        
        public UIC1Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "c1";
            this.WindowTitles.Add("Menu");
            #endregion
        }
        
        #region Properties
        public UIC3Pane UIC3Pane
        {
            get
            {
                if ((this.mUIC3Pane == null))
                {
                    this.mUIC3Pane = new UIC3Pane(this);
                }
                return this.mUIC3Pane;
            }
        }
        
        public WpfButton UIUpdateDeleteButton
        {
            get
            {
                if ((this.mUIUpdateDeleteButton == null))
                {
                    this.mUIUpdateDeleteButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIUpdateDeleteButton.SearchProperties[WpfButton.PropertyNames.Name] = "Update/Delete";
                    this.mUIUpdateDeleteButton.WindowTitles.Add("Menu");
                    #endregion
                }
                return this.mUIUpdateDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private UIC3Pane mUIC3Pane;
        
        private WpfButton mUIUpdateDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIC3Pane : WpfPane
    {
        
        public UIC3Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "c3";
            this.WindowTitles.Add("Menu");
            #endregion
        }
        
        #region Properties
        public WpfButton UILoadButton
        {
            get
            {
                if ((this.mUILoadButton == null))
                {
                    this.mUILoadButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUILoadButton.SearchProperties[WpfButton.PropertyNames.Name] = "Load";
                    this.mUILoadButton.WindowTitles.Add("Menu");
                    #endregion
                }
                return this.mUILoadButton;
            }
        }
        
        public WpfEdit UITbLoadEdit
        {
            get
            {
                if ((this.mUITbLoadEdit == null))
                {
                    this.mUITbLoadEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUITbLoadEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbLoad";
                    this.mUITbLoadEdit.WindowTitles.Add("Menu");
                    #endregion
                }
                return this.mUITbLoadEdit;
            }
        }
        
        public WpfButton UIUpdateButton
        {
            get
            {
                if ((this.mUIUpdateButton == null))
                {
                    this.mUIUpdateButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIUpdateButton.SearchProperties[WpfButton.PropertyNames.Name] = "Update";
                    this.mUIUpdateButton.WindowTitles.Add("Menu");
                    #endregion
                }
                return this.mUIUpdateButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUILoadButton;
        
        private WpfEdit mUITbLoadEdit;
        
        private WpfButton mUIUpdateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIC3Pane1 : WpfPane
    {
        
        public UIC3Pane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "c3";
            this.WindowTitles.Add("Menu");
            #endregion
        }
        
        #region Properties
        public UIUsernotFoundText UIUsernotFoundText
        {
            get
            {
                if ((this.mUIUsernotFoundText == null))
                {
                    this.mUIUsernotFoundText = new UIUsernotFoundText(this);
                }
                return this.mUIUsernotFoundText;
            }
        }
        
        public UINothingUpdatedText UINothingUpdatedText
        {
            get
            {
                if ((this.mUINothingUpdatedText == null))
                {
                    this.mUINothingUpdatedText = new UINothingUpdatedText(this);
                }
                return this.mUINothingUpdatedText;
            }
        }
        #endregion
        
        #region Fields
        private UIUsernotFoundText mUIUsernotFoundText;
        
        private UINothingUpdatedText mUINothingUpdatedText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIUsernotFoundText : WpfText
    {
        
        public UIUsernotFoundText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "hiddenLabel";
            this.WindowTitles.Add("Menu");
            #endregion
        }
        
        #region Properties
        public WpfText UIUsernotFoundText1
        {
            get
            {
                if ((this.mUIUsernotFoundText1 == null))
                {
                    this.mUIUsernotFoundText1 = new WpfText(this);
                    #region Suchkriterien
                    this.mUIUsernotFoundText1.SearchProperties[WpfText.PropertyNames.Name] = "User not Found";
                    this.mUIUsernotFoundText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIUsernotFoundText1.WindowTitles.Add("Menu");
                    #endregion
                }
                return this.mUIUsernotFoundText1;
            }
        }
        
        public WpfText UIUserFoundText1
        {
            get
            {
                if ((this.mUIUserFoundText1 == null))
                {
                    this.mUIUserFoundText1 = new WpfText(this);
                    #region Suchkriterien
                    this.mUIUserFoundText1.SearchProperties[WpfText.PropertyNames.Name] = "User Found";
                    this.mUIUserFoundText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIUserFoundText1.WindowTitles.Add("Menu");
                    #endregion
                }
                return this.mUIUserFoundText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIUsernotFoundText1;
        
        private WpfText mUIUserFoundText1;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UINothingUpdatedText : WpfText
    {
        
        public UINothingUpdatedText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "hiddenLabel2";
            this.WindowTitles.Add("Menu");
            #endregion
        }
        
        #region Properties
        public WpfText UINothingUpdatedText1
        {
            get
            {
                if ((this.mUINothingUpdatedText1 == null))
                {
                    this.mUINothingUpdatedText1 = new WpfText(this);
                    #region Suchkriterien
                    this.mUINothingUpdatedText1.SearchProperties[WpfText.PropertyNames.Name] = "Nothing Updated";
                    this.mUINothingUpdatedText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUINothingUpdatedText1.WindowTitles.Add("Menu");
                    #endregion
                }
                return this.mUINothingUpdatedText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUINothingUpdatedText1;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UISalüzemeWindow : WinWindow
    {
        
        public UISalüzemeWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Salü zeme";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Salü zeme");
            #endregion
        }
        
        #region Properties
        public UIJAWindow UIJAWindow
        {
            get
            {
                if ((this.mUIJAWindow == null))
                {
                    this.mUIJAWindow = new UIJAWindow(this);
                }
                return this.mUIJAWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIJAWindow mUIJAWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIJAWindow : WinWindow
    {
        
        public UIJAWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Salü zeme");
            #endregion
        }
        
        #region Properties
        public WinButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new WinButton(this);
                    #region Suchkriterien
                    this.mUIJAButton.SearchProperties[WinButton.PropertyNames.Name] = "Ja";
                    this.mUIJAButton.WindowTitles.Add("Salü zeme");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinButton UISchließenButton
        {
            get
            {
                if ((this.mUISchließenButton == null))
                {
                    this.mUISchließenButton = new WinButton(this);
                    #region Suchkriterien
                    this.mUISchließenButton.SearchProperties[WinButton.PropertyNames.Name] = "Schließen";
                    this.mUISchließenButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISchließenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISchließenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Suchkriterien
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
